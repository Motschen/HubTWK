---
const {  title, programs } = Astro.props
---

<h2 class="text-2xl mt-16 mb-4 font-bold leading-10 tracking-tight text-gray-900 dark:text-white">{title}</h2>
<div class="grid grid-cols-1 gap-12 md:grid-cols-2 lg:grid-cols-3">
  {
    programs.map((program) => (
    <a href={program.url} rel="noopener noreferrer external" target="_blank" class="feature flex flex-col gap-4">
      <audio class='hover-sound' src='/hover.ogg' />
      <div class="relative isolate flex flex-col overflow-hidden rounded-xl bg-stone-950">
        <img 
          src={`img/program/`+program.picture+`.webp`}
          class="absolute -z-10 h-500 w-full object-cover"
        />
        <div class="absolute inset-0 -z-10 bg-gradient-to-t from-gray-900 via-gray-900/40" />

        <div class="content mt-20">
          <h3>{program.title}</h3>
          <span class="text-base leading-7 text-gray-600 dark:text-gray-100">
            <span set:html={program.description}></span>
          </span>
        </div>
      </div>
    </a>
    ),
  )}
</div>

<script>
  const feature = document.getElementsByClassName("feature");
  
  for (var i = 0; i < feature.length; i++) {
    const audio = feature[i].querySelector(':scope > .hover-sound');
    feature[i].addEventListener("mouseenter", function() {
      audio.play();
    });
  }
</script>

<style lang="scss">
  @use '../assets/scss/base/breakpoint' as *;

  .feature {
    transition: inset 0.2s ease-in-out;
    inset: 0;
    color: black !important;
    text-decoration: unset !important;

    position: relative;
    width: calc(100% - 0.5rem);
    padding: 1.5rem;

    > * {
      position: relative;
      z-index: 2;
    }

    @include breakpoint(large) {
      width: 100%;
    }

    &::before,
    &::after {
      content: '';
      position: absolute;
    }

    &::before {
      inset: 0;
      background-color: var(--neutral-100);
      border: 3px solid var(--neutral-700);
      border-radius: 1rem;
      box-shadow: 0 0 0 6px var(--neutral-100);
      z-index: 1;
    }

    &::after {
      background-color: var(--action-color);
      transition: inset 0.2s ease-in-out;
      inset: 1rem -0.85rem -0.85rem 1rem;
      border-radius: 1rem;
      z-index: 0;
    }
    &:hover::after, &:focus::after {
      inset: 0;
    }
  }
  .feature:hover, .feature:focus {
    inset: 1rem -0.85rem -0.85rem 1rem;
  }
  .feature:is(.darkmode *) {
    color: white !important;
  }

  :global(.feature [data-icon]) {
    height: auto;
    width: 4rem;
    color: var(--action-color);
  }

  :global(.darkmode .feature::before) {
    background-color: var(--dark-100);
    box-shadow: 0 0 0 6px var(--dark-100);
  }
</style>

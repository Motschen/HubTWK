---
import { Icon } from 'astro-icon/components'

const { icon = 'mdi:rocket', title = 'Title', href = "", subtitle } = Astro.props
---
<div class="relative bounding-box flex">
<a href={href} rel="noopener noreferrer external" target="_blank" class="feature flex flex-col gap-4 text-center items-center">
  <audio class='hover-sound' src='/hover.ogg' />
  <div>
    <Icon name={icon} class="content-center m-auto" />
    <div class="content">
      <h3>{title}</h3>
      {subtitle ? <h6>{subtitle}</h6> : ''}
      <p>
        <slot>Lorem ipsum dolor sit amet consectetur adipisicing elit. Hic, corporis.</slot>
      </p>
    </div>
  </div>
</a>
</div>

<script>
  const feature = document.getElementsByClassName("feature");
  
  for (var i = 0; i < feature.length; i++) {
    const audio = feature[i].querySelector(':scope > .hover-sound');
    feature[i].addEventListener("mouseenter", function() {
      if (audio instanceof HTMLAudioElement) audio.play();
    });
  }
</script>

<style lang="scss">
  @use '../assets/scss/base/breakpoint' as *;

  .feature {
    transition: inset 0.2s ease-in-out;
    inset: 0;
    color: black !important;
    text-decoration: unset !important;

    position: relative;
    width: calc(100% - 0.5rem);
    padding: 2rem;

    > * {
      position: relative;
      z-index: 2;
    }

    @include breakpoint(large) {
      width: 100%;
    }

    &::before,
    &::after {
      content: '';
      position: absolute;
    }

    &::before {
      inset: 0;
      background-color: var(--neutral-100);
      border: 3px solid var(--neutral-700);
      border-radius: 1rem;
      box-shadow: 0 0 0 6px var(--neutral-100);
      z-index: 1;
    }

    &::after {
      background-image: linear-gradient(to right, var(--action-color), var(--accent-color));
      transition: inset 0.2s ease-in-out;
      inset: 1rem -0.85rem -0.85rem 1rem;
      border-radius: 1rem;
      z-index: 0;
    }
    
  }
  .bounding-box:hover .feature, .feature:focus {
    inset: 1rem -0.85rem -0.85rem 1rem;
    &::after {
      inset: 0;
    }
  }
  .feature:is(.darkmode *) {
    color: white !important;
  }

  :global(.feature [data-icon]) {
    height: auto;
    width: 4rem;
    color: var(--action-color);
  }

  :global(.darkmode .feature::before) {
    background-color: var(--dark-100);
    box-shadow: 0 0 0 6px var(--dark-100);
  }
</style>

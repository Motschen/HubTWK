---
interface Props {
  includeHashtag?: boolean
}
const { includeHashtag } = Astro.props
import { Icon } from 'astro-icon/components'
---
<color-picker>
  <section class="my-6">
    <div class="">
      <p class="text-lg">WÃ¤hlen Sie eine Farbe:</p>
      <fieldset>
        <input
          type="color"
          id="color-select"
          class="h-16 w-48 hover:cursor-pointer rounded-xl border-neutral-900 dark:border-neutral-100 border-4"
        />
      </fieldset>
      <div class="column md:flex basis-2">
        <div class="">
          <label>HEX-Code:</label>
          <button
            id="hex-button"
            class="copy-button button has-icon color-secondary rounded-md text-white hover:cursor-pointer appearance-none h-16">
            <p id="hex-color-label">{includeHashtag ? '#' : ''}000000</p>
            <Icon class="copy-icon" name="ion:copy-outline" />
            <Icon class="success-icon hidden" name="ion:checkmark-outline" />
          </button>
        </div>
        <div class="md:ml-3">
          <label>RGB-Wert:</label>
          <button
            id="rgb-button"
            class="copy-button button has-icon color-secondary md:ml-3 rounded-md text-white hover:cursor-pointer appearance-none h-16">
            <p id="rgb-color-label">rgb(0, 0, 0)</p>
            <Icon class="copy-icon" name="ion:copy-outline" />
            <Icon class="success-icon hidden" name="ion:checkmark-outline" />
          </button>
        </div>
        <div class="md:ml-3">
          <label>HSL-Wert:</label>
          <button
            id="hsl-button"
            class="copy-button button has-icon color-secondary md:ml-3 rounded-md text-white hover:cursor-pointer appearance-none h-16">
            <p id="hsl-color-label">hsl(0, 0%, 0%)</p>
            <Icon class="copy-icon" name="ion:copy-outline" />
            <Icon class="success-icon hidden" name="ion:checkmark-outline" />
          </button>
        </div>
        <button
          id="colorhexa-button"
          class="button has-icon color-main md:ml-9 mt-6 rounded-md text-white hover:cursor-pointer appearance-none h-16">
          <p id="hsl-color-label">Mehr auf ColorHexa</p>
          <Icon class="copy-icon" name="ion:open-outline" />
          <Icon class="success-icon hidden" name="ion:checkmark-outline" />
        </button>
      </div>
    </div>
  </section>
</color-picker>

<script>
  import { converter, formatRgb, formatHsl } from 'culori';

  let rgb = converter('rgb');
  let hsl = converter('hsl');
  
  // Define the behaviour for our new type of HTML element.
  class ColorPicker extends HTMLElement {
    connectedCallback() {
      // Get the elements from above
      const hexColorLabel = document.getElementById("hex-color-label");
      const rgbColorLabel = document.getElementById("rgb-color-label");
      const hslColorLabel = document.getElementById("hsl-color-label");
      const colorHexaButton = document.getElementById("colorhexa-button");
      const colorSelect = document.getElementById("color-select");

      colorSelect.value = '#000000';

      colorSelect?.addEventListener("change", async (e) => {
        const {
          target: { value }, // Returns the chosen color (already in hex format :D)
        } = e;
        if (hexColorLabel) hexColorLabel.innerText = hexColorLabel.innerText.startsWith('#') ? value : value.replace('#', '');
        if (rgbColorLabel) rgbColorLabel.innerText = formatRgb(rgb(value));
        if (hslColorLabel) hslColorLabel.innerText = formatHsl(hsl(value));
      });

      // Add event listener to copy the color to the clipboard
      if (hexColorLabel) {
        const copyButtons = document.getElementsByClassName("copy-button");
        for (var i = 0; i < copyButtons.length; i++) {
          const button = copyButtons[i];
          button.addEventListener('click', () => copyString(button));
        }
      }
      if (colorHexaButton) {
        colorHexaButton.addEventListener('click', () => {
          let hexCode;
          if (hexColorLabel) hexCode = hexColorLabel.innerText.replace('#', '');
          window.open(`https://www.colorhexa.com/${hexCode}`);
        });
      }

      async function copyString(button: Element) {
        if (!button.firstChild) return;
        let text = button.querySelectorAll(':scope > p')[0].innerText;
        await navigator.clipboard.writeText(text);

        const copyIcon = button.querySelector(':scope > .copy-icon');
        const successIcon = button.querySelector(':scope > .success-icon');

        // visual feedback that task is completed
        if (button) {
          button.style.backgroundColor = text;
          button.style.borderColor = text;
        }
        if (copyIcon) copyIcon.style.display = 'none';
        if (successIcon) successIcon.style.display = 'initial';

        setTimeout(() => {
          if (button) {
            button.style.backgroundColor = 'var(--secondary-100)';
            button.style.borderColor = 'var(--secondary-100)';
          }
          if (copyIcon) copyIcon.style.display = 'initial';
          if (successIcon) successIcon.style.display = 'none';
        }, 1000);
      }
    }
  }

  
  // Tell the browser to use our ColorPicker class for <color-picker> elements.
  customElements.define('color-picker', ColorPicker);

  

</script>